[{"path":"/articles/ExampleCode.html","id":"using-the-ohdsireportgenerator-package","dir":"Articles","previous_headings":"","what":"Using the OhdsiReportGenerator Package","title":"Using Observational Health Data Sciences and Informatics (OHDSI) Report Generator","text":"package enables users extract characterization, estimation prediction results OHDSI results (see result model) generated via R packages PatientLevelPrediction, Characterization, CohortMethod SelfControlledCaseSeries.","code":""},{"path":"/articles/ExampleCode.html","id":"example-result-database","dir":"Articles","previous_headings":"Using the OhdsiReportGenerator Package","what":"Example Result Database","title":"Using Observational Health Data Sciences and Informatics (OHDSI) Report Generator","text":"package provides users example OHDSI result database. can accessed via getExampleConnectionDetails() contains results running demo analysis using Eunomia R package sample OMOP CDM data.","code":"library(OhdsiReportGenerator) # create a connection details object to  connectionDetails <- getExampleConnectionDetails()  # create a connection handler to the results library(ResultModelManager) ## Loading required package: R6 ## Loading required package: DatabaseConnector ConnectionHandler <- ResultModelManager::ConnectionHandler$new(connectionDetails) ## Connecting using SQLite driver"},{"path":"/articles/ExampleCode.html","id":"extracting-cohorts","dir":"Articles","previous_headings":"Using the OhdsiReportGenerator Package","what":"Extracting Cohorts","title":"Using Observational Health Data Sciences and Informatics (OHDSI) Report Generator","text":"cohort details can extracted using function getCohortDefinitions requires user input connection handler, schema, table prefix used CohortGenerator (default ‘cg_’) target cohort ids restrict . example results sqlite database use schema ‘main’. data.frame extracted containing cohort details minus json sqlCommand columns. can process cohorts definitions extract parent cohorts children parent cohort. children/subset cohorts first parent cohort. example, created cohort corresponding patients exposed drug id 1 created ‘children’ subset cohorts corresponding patients exposed drug indication X id 1001 patients exposed drug aged 60+ cohort id 1002, getCohortDefinition() extract three cohorts processCohorts() identify cohort 1 parent cohorts 1,1001,1002 children/subset cohort 1. can also extract subset logic subset id: subset cohort logic used analysis. “name”: “age 18 64”, “definitionId”: 1, “subsetOperators”: [ { “name”: “Age 18 64”, “subsetType”: “DemographicSubsetOperator”, “ageMin”: 18, “ageMax”: 64 } ], “packageVersion”: “0.11.2”, “identifierExpression”: “targetId * 1000 + definitionId”, “operatorNameConcatString”: “,”, “subsetCohortNameTemplate”: “@baseCohortName - @subsetDefinitionName @operatorNames” } | | 2|{ “name”: “first event 365 prior obs”, “definitionId”: 2, “subsetOperators”: [ { “name”: “first event 365 prior obs”, “subsetType”: “LimitSubsetOperator”, “priorTime”: 365, “followUpTime”: 0, “limitTo”: “firstEver” } ], “packageVersion”: “0.11.2”, “identifierExpression”: “targetId * 1000 + definitionId”, “operatorNameConcatString”: “,”, “subsetCohortNameTemplate”: “@baseCohortName - @subsetDefinitionName @operatorNames” } | | 3|{ “name”: “age 18 64 first event 365 prior obs”, “definitionId”: 3, “subsetOperators”: [ { “name”: “Age 18 64”, “subsetType”: “DemographicSubsetOperator”, “ageMin”: 18, “ageMax”: 64 }, { “name”: “first event 365 prior obs”, “subsetType”: “LimitSubsetOperator”, “priorTime”: 365, “followUpTime”: 0, “limitTo”: “firstEver” } ], “packageVersion”: “0.11.2”, “identifierExpression”: “targetId * 1000 + definitionId”, “operatorNameConcatString”: “,”, “subsetCohortNameTemplate”: “@baseCohortName - @subsetDefinitionName @operatorNames” } |","code":"cohorts <- getCohortDefinitions(     connectionHandler = ConnectionHandler,     schema = 'main',     cgTablePrefix = 'cg_',     targetIds = NULL )  knitr::kable(   x = cohorts %>%      dplyr::select(-\"json\", -\"sqlCommand\"),    caption = 'The data.frame extracted containing the cohort details minus the json and sqlCommand columns.'   ) if(nrow(cohorts) > 0){ processedCohorts <- processCohorts(cohorts)  knitr::kable(   x = data.frame(     parentId = processedCohorts$parents,     parentName= names(processedCohorts$parents)     ),    caption = 'The parent cohorts.'   )  knitr::kable(   x = processedCohorts$cohortList[[1]] %>%      dplyr::select(-\"json\", -\"sqlCommand\"),   caption = 'The children/subset cohorts for the first parent cohort.'   ) } subsets <- getCohortSubsetDefinitions(     connectionHandler = ConnectionHandler,     schema = 'main',     cgTablePrefix = 'cg_' )  knitr::kable(   x = subsets,    caption = 'The subset cohort logic used in the analysis.'   )"},{"path":"/articles/ExampleCode.html","id":"extracting-characterization-results","dir":"Articles","previous_headings":"Using the OhdsiReportGenerator Package","what":"Extracting Characterization Results","title":"Using Observational Health Data Sciences and Informatics (OHDSI) Report Generator","text":"characterization analysis contains time event results, dechallenge-rechallenge, risk factor cohort incidence results. time--event results tell often outcome occurs relative target cohort index date 1-day, 30-day 365-day scale. Example time--event results 365-day scale. dechallenge-rechallenge analysis shows often outcome occurs target exposure often target exposure stopped shortly outcome whether outcome re-occurs target exposure restarts: Example dechallenge-rechallenge results. also possible find incidence rates (restrict ages, genders start years): Example incidence rate results. Finally, possible get risk factors (associations features occurrence outcome time--risk) using getBinaryRiskFactors identify binary features: Example risk factors binary features results. getContinuousRiskFactors continuous features: Example risk factors continuous features results.","code":"tte <- getTimeToEvent(     connectionHandler = ConnectionHandler,     schema = 'main' )  knitr::kable(   x = tte %>% dplyr::filter(.data$timeScale == 'per 365-day'),    caption = 'Example time-to-event results for the 365-day scale.'   ) drc <- getDechallengeRechallenge(     connectionHandler = ConnectionHandler,     schema = 'main' )  knitr::kable(   x = drc,    caption = 'Example dechallenge-rechallenge results.'   ) ir <- getIncidenceRates(     connectionHandler = ConnectionHandler,     schema = 'main',      targetIds = 1 )  knitr::kable(   x = ir %>% dplyr::filter(     subgroupName == 'All' &     ageGroupName == 'Any' &      genderName == 'Any' &        startYear == 'Any'   ),    caption = 'Example incidence rate results.'   ) rf <- getBinaryRiskFactors(     connectionHandler = ConnectionHandler,     schema = 'main',      targetId = 1,      outcomeId = 3 )  knitr::kable(   x = rf,    caption = 'Example risk factors for binary features results.'   ) rf <- getContinuousRiskFactors(     connectionHandler = ConnectionHandler,     schema = 'main',      targetId = 1,      outcomeId = 3 )  knitr::kable(   x = rf,    caption = 'Example risk factors for continuous features results.'   )"},{"path":"/articles/ExampleCode.html","id":"extracting-prediction-results","dir":"Articles","previous_headings":"Using the OhdsiReportGenerator Package","what":"Extracting Prediction Results","title":"Using Observational Health Data Sciences and Informatics (OHDSI) Report Generator","text":"model designs used develop prediction models analysis can extracted using getPredictionModelDesigns: Example model designs prediction results. know modelDesignId interest, can extract model performance: Example performance prediction results. well top predictors, case return top 5: Example top five predictors. can also select certain results attrition: Example prediction attrition performance 1.","code":"modelDesigns <- getPredictionModelDesigns(     connectionHandler = ConnectionHandler,     schema = 'main',      targetIds = 1002,      outcomeIds = 3 )  knitr::kable(   x = modelDesigns %>%     dplyr::select(       \"modelDesignId\",         \"modelType\",       \"developmentTargetId\",       \"developmentTargetName\",       \"developmentOutcomeId\",          \"developmentOutcomeName\",        \"timeAtRisk\",       \"meanAuroc\",        \"noDevelopmentDatabases\"     ),    caption = 'Example model designs for the prediction results.'   ) perform <- getPredictionPerformances(     connectionHandler = ConnectionHandler,     schema = 'main',      modelDesignId = 1 )  knitr::kable(   x = perform,    caption = 'Example performance for the prediction results.'   ) top5 <- getPredictionTopPredictors(     connectionHandler = ConnectionHandler,     schema = 'main',      targetIds = 1002,      outcomeIds = 3,     numberPredictors = 5 )  knitr::kable(   x = top5 ,    caption = 'Example top five predictors.'   ) attrition <- getPredictionPerformanceTable(     connectionHandler = ConnectionHandler,     schema = 'main',      table = 'attrition',     performanceId = 1 )  knitr::kable(   x = attrition ,    caption = 'Example prediction attrition for performance 1.'   )"},{"path":"/articles/ExampleCode.html","id":"extracting-estimation-results","dir":"Articles","previous_headings":"Using the OhdsiReportGenerator Package","what":"Extracting Estimation Results","title":"Using Observational Health Data Sciences and Informatics (OHDSI) Report Generator","text":"possible extract cohort method self controlled case series results make nice plots. extract cohort method estimations target id 1002 outcome 3: Example cohort method estimation results. can also extract meta-analysis estimate cohort method: Example cohort method meta analysis estimation results. can create nice plot show results:","code":"cmEst <- getCMEstimation(     connectionHandler = ConnectionHandler,     schema = 'main',      targetIds = 1002,      comparatorIds = 2002,     outcomeIds = 3 )  knitr::kable(   x = cmEst ,    caption = 'Example cohort method estimation results.'   ) cmMe <- getCmMetaEstimation(     connectionHandler = ConnectionHandler,     schema = 'main' )  knitr::kable(   x = cmMe ,    caption = 'Example cohort method meta analysis estimation results.'   ) plotCmEstimates(   cmData = cmEst,    cmMeta = NULL,   targetName = 'Example Target',    comparatorName = 'Example Comp',    selectedAnalysisId = 1 )"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jenna Reps. Author, maintainer. Anthony Sena. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Reps J, Sena (2025). OhdsiReportGenerator: Extract results generate plots, presentations reports Observational Health Data Sciences Informatics results database. R package version 1.0.0, https://github.com/OHDSI/OhdsiReportGenerator, https://ohdsi.github.io/OhdsiReportGenerator.","code":"@Manual{,   title = {OhdsiReportGenerator: Extract results and generate plots, presentations and reports from the Observational Health Data Sciences and Informatics results database},   author = {Jenna Reps and Anthony Sena},   year = {2025},   note = {R package version 1.0.0, https://github.com/OHDSI/OhdsiReportGenerator},   url = {https://ohdsi.github.io/OhdsiReportGenerator}, }"},{"path":[]},{"path":"/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Extract results and generate plots, presentations and reports from the Observational Health Data Sciences and Informatics results database","text":"package contains functions extracting characterization, estimation prediction results OHDSI result database (see https://ohdsi.github.io/Strategus/results-schema/index.html). also contains codes create useful plots, presentations templates report templates.","code":""},{"path":"/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Extract results and generate plots, presentations and reports from the Observational Health Data Sciences and Informatics results database","text":"Download repository using RStudio, install package. can make use report generator running:","code":"# Install OhdsiReportGenerator using remotes} install.packages('remotes') remotes::install_github('OHDSI/OhdsiReportGenerator')  # Load the library to start using it library(OhdsiReportGenerator)  # to run the report generator with a demo set of results conDet <- OhdsiReportGenerator:::getExampleConnectionDetails()  generatePresentationMultiple(     server = conDet$server(),     username = conDet$user(),     password = conDet$password(),     dbms = conDet$dbms,     resultsSchema = 'main',     targetId = 1,     targetName = 'target',     cmSubsetId = 2,     sccsSubsetId = NULL,     indicationName = NULL,     outcomeIds = 3,     outcomeNames = 'outcome',     comparatorIds = 2,     comparatorNames = 'comparator',     covariateIds = NULL,     details = list(       studyPeriod = 'All Time',       restrictions = \"Age - None\"     ),     title = 'Example results repport',     lead = 'John Doe',     date = Sys.Date(),     backgroundText = '',     evaluationText = '',   outputLocation = file.path(getwd(), \"extras/reportTest\"),   outputName = paste0('presentation_', gsub(':', '_',gsub(' ','_',as.character(date()))),'.html') )"},{"path":"/index.html","id":"technology","dir":"","previous_headings":"","what":"Technology","title":"Extract results and generate plots, presentations and reports from the Observational Health Data Sciences and Informatics results database","text":"OhdsiReportGenerator R package.","code":""},{"path":"/index.html","id":"system-requirements","dir":"","previous_headings":"","what":"System Requirements","title":"Extract results and generate plots, presentations and reports from the Observational Health Data Sciences and Informatics results database","text":"Running package requires R Java.","code":""},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Extract results and generate plots, presentations and reports from the Observational Health Data Sciences and Informatics results database","text":"OhdsiReportGenerator licensed Apache License 2.0.","code":""},{"path":"/index.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"Extract results and generate plots, presentations and reports from the Observational Health Data Sciences and Informatics results database","text":"OhdsiReportGenerator developed R Studio.","code":""},{"path":"/reference/OhdsiReportGenerator-package.html","id":null,"dir":"Reference","previous_headings":"","what":"OhdsiReportGenerator: Extract results and generate plots, presentations and reports from the Observational Health Data Sciences and Informatics results database — OhdsiReportGenerator-package","title":"OhdsiReportGenerator: Extract results and generate plots, presentations and reports from the Observational Health Data Sciences and Informatics results database — OhdsiReportGenerator-package","text":"Extract analysis results R data.frames Observational Health Data Sciences Informatics result database generate reports summarize results HTML format.","code":""},{"path":[]},{"path":"/reference/OhdsiReportGenerator-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"OhdsiReportGenerator: Extract results and generate plots, presentations and reports from the Observational Health Data Sciences and Informatics results database — OhdsiReportGenerator-package","text":"Maintainer: Jenna Reps jreps@.jnj.com Authors: Anthony Sena sena@ohdsi.org","code":""},{"path":"/reference/generatePresentationMultiple.html","id":null,"dir":"Reference","previous_headings":"","what":"generatePresentationMultiple — generatePresentationMultiple","title":"generatePresentationMultiple — generatePresentationMultiple","text":"Generates presentation Strategus result","code":""},{"path":"/reference/generatePresentationMultiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generatePresentationMultiple — generatePresentationMultiple","text":"","code":"generatePresentationMultiple(   server,   username,   password,   dbms,   resultsSchema = NULL,   targetId = 1,   targetName = \"target cohort\",   cmSubsetId = 2,   sccsSubsetId = NULL,   indicationName = NULL,   outcomeIds = 3,   outcomeNames = \"outcome cohort\",   comparatorIds = c(2, 4),   comparatorNames = c(\"comparator cohort 1\", \"comparator cohort 2\"),   covariateIds = NULL,   details = list(studyPeriod = \"All Time\", restrictions = \"Age - None\"),   title = \"ASSURE 001 ...\",   lead = \"add name\",   date = Sys.Date(),   backgroundText = \"\",   evaluationText = \"\",   outputLocation = getwd(),   outputName = paste0(\"presentation_\", gsub(\":\", \"_\", gsub(\" \", \"_\",     as.character(date()))), \".html\"),   intermediateDir = tempdir() )"},{"path":"/reference/generatePresentationMultiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generatePresentationMultiple — generatePresentationMultiple","text":"server server containing result database username username account can access result database password password account can access result database dbms dbms used access result database resultsSchema result database schema targetId cohort definition id target cohort targetName friendly name target cohort cmSubsetId Optional subset ID cohort method/prediction results sccsSubsetId Optional subset ID SCCS characterization results indicationName name indication used NULL outcomeIds cohort definition id outcome outcomeNames Friendly names outcomes comparatorIds cohort method comparator cohort id comparatorNames Friendly names comparators covariateIds vector covariateIds include characterization details list studyPeriod restrictions title title presentation lead name presentor date date presentation backgroundText character background text evaluationText list bullet points evaluation outputLocation file location name save protocol outputName name html protocol created intermediateDir work directory quarto","code":""},{"path":"/reference/generatePresentationMultiple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generatePresentationMultiple — generatePresentationMultiple","text":"named R list elements 'standard' 'source'","code":""},{"path":"/reference/generatePresentationMultiple.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"generatePresentationMultiple — generatePresentationMultiple","text":"Specify connection details result database schema name generate presentation.","code":""},{"path":"/reference/getBinaryCaseSeries.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to extract case series characterization results — getBinaryCaseSeries","title":"A function to extract case series characterization results — getBinaryCaseSeries","text":"function extract case series characterization results","code":""},{"path":"/reference/getBinaryCaseSeries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to extract case series characterization results — getBinaryCaseSeries","text":"","code":"getBinaryCaseSeries(   connectionHandler,   schema,   cTablePrefix = \"c_\",   cgTablePrefix = \"cg_\",   databaseTable = \"database_meta_data\",   targetId = NULL,   outcomeId = NULL )"},{"path":"/reference/getBinaryCaseSeries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to extract case series characterization results — getBinaryCaseSeries","text":"connectionHandler connection handler connects database extracts sql queries.  Create connection handler via `ResultModelManager::ConnectionHandler$new()`. schema result database schema (e.g., 'main' sqlite) cTablePrefix prefix used characterization results tables cgTablePrefix prefix used cohort generator results tables databaseTable name table database details (default 'database_meta_data') targetId integer corresponding target cohort ID outcomeId integer corresponding outcome cohort ID","code":""},{"path":"/reference/getBinaryCaseSeries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to extract case series characterization results — getBinaryCaseSeries","text":"data.frame characterization case series results","code":""},{"path":"/reference/getBinaryCaseSeries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A function to extract case series characterization results — getBinaryCaseSeries","text":"Specify connectionHandler, schema target/outcome cohort IDs","code":""},{"path":[]},{"path":"/reference/getBinaryCaseSeries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to extract case series characterization results — getBinaryCaseSeries","text":"","code":"conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  cs <- getBinaryCaseSeries(   connectionHandler = connectionHandler,    schema = 'main',   targetId = 1,    outcomeId = 3 )"},{"path":"/reference/getBinaryRiskFactors.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to extract non-case and case binary characterization results — getBinaryRiskFactors","title":"A function to extract non-case and case binary characterization results — getBinaryRiskFactors","text":"function extract non-case case binary characterization results","code":""},{"path":"/reference/getBinaryRiskFactors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to extract non-case and case binary characterization results — getBinaryRiskFactors","text":"","code":"getBinaryRiskFactors(   connectionHandler,   schema,   cTablePrefix = \"c_\",   cgTablePrefix = \"cg_\",   databaseTable = \"database_meta_data\",   targetId = NULL,   outcomeId = NULL,   analysisIds = c(3) )"},{"path":"/reference/getBinaryRiskFactors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to extract non-case and case binary characterization results — getBinaryRiskFactors","text":"connectionHandler connection handler connects database extracts sql queries.  Create connection handler via `ResultModelManager::ConnectionHandler$new()`. schema result database schema (e.g., 'main' sqlite) cTablePrefix prefix used characterization results tables cgTablePrefix prefix used cohort generator results tables databaseTable name table database details (default 'database_meta_data') targetId integer corresponding target cohort ID outcomeId integer corresponding outcome cohort ID analysisIds feature extraction analysis ID interest (e.g., 201 condition)","code":""},{"path":"/reference/getBinaryRiskFactors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to extract non-case and case binary characterization results — getBinaryRiskFactors","text":"data.frame characterization results cases non-cases","code":""},{"path":"/reference/getBinaryRiskFactors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A function to extract non-case and case binary characterization results — getBinaryRiskFactors","text":"Specify connectionHandler, schema target/outcome cohort IDs","code":""},{"path":[]},{"path":"/reference/getBinaryRiskFactors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to extract non-case and case binary characterization results — getBinaryRiskFactors","text":"","code":"conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  rf <- getBinaryRiskFactors(   connectionHandler = connectionHandler,    schema = 'main',   targetId = 1,    outcomeId = 3 )"},{"path":"/reference/getCMEstimation.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the cohort method results — getCMEstimation","title":"Extract the cohort method results — getCMEstimation","text":"function extracts single database cohort method estimates results can unblinded calibrated RR","code":""},{"path":"/reference/getCMEstimation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the cohort method results — getCMEstimation","text":"","code":"getCMEstimation(   connectionHandler,   schema,   cmTablePrefix = \"cm_\",   cgTablePrefix = \"cg_\",   databaseTable = \"database_meta_data\",   targetIds = NULL,   outcomeIds = NULL,   comparatorIds = NULL )"},{"path":"/reference/getCMEstimation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the cohort method results — getCMEstimation","text":"connectionHandler connection handler connects database extracts sql queries.  Create connection handler via `ResultModelManager::ConnectionHandler$new()`. schema result database schema (e.g., 'main' sqlite) cmTablePrefix prefix used cohort method results tables cgTablePrefix prefix used cohort generator results tables databaseTable name table database details (default 'database_meta_data') targetIds vector integers corresponding target cohort IDs outcomeIds vector integers corresponding outcome cohort IDs comparatorIds vector integers corresponding comparator cohort IDs","code":""},{"path":"/reference/getCMEstimation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the cohort method results — getCMEstimation","text":"Returns data.frame columns: databaseName name database analysisId analysis design unique identifier description analysis design description targetName target cohort name targetId target cohort unique identifier comparatorName comparator cohort name comparatorId comparator cohort unique identifier outcomeName outcome name outcomeId outcome unique identifier calibratedRr calibrated relative risk calibratedRrCi95Lb calibrated relative risk 95 percent confidence interval lower bound calibratedRrCi95Ub calibrated relative risk 95 percent confidence interval upper bound calibratedP two sided calibrated p value calibratedOneSidedP one sided calibrated p value calibratedLogRr calibrated relative risk logged calibratedSeLogRr standard error calibrated relative risk logged targetSubjects number people target cohort comparatorSubjects number people comparator cohort targetDays total number days risk across target cohort people comparatorDays total number days risk across comparator cohort people targetOutcomes total number outcomes occuring time risk target cohort people comparatorOutcomes total number outcomes occuring time risk comparator cohort people targetEstimator ...","code":""},{"path":"/reference/getCMEstimation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the cohort method results — getCMEstimation","text":"Specify connectionHandler, schema target/comparator/outcome cohort IDs","code":""},{"path":[]},{"path":"/reference/getCMEstimation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the cohort method results — getCMEstimation","text":"","code":"conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  cmEst <- getCMEstimation(   connectionHandler = connectionHandler,    schema = 'main',   targetIds = 1,   outcomeIds = 3 )"},{"path":"/reference/getCaseBinaryFeatures.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregate statistics of binary feature analysis IDs of interest for cases — getCaseBinaryFeatures","title":"Extract aggregate statistics of binary feature analysis IDs of interest for cases — getCaseBinaryFeatures","text":"function extracts feature extraction results cases corresponding specified target outcome cohorts.","code":""},{"path":"/reference/getCaseBinaryFeatures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregate statistics of binary feature analysis IDs of interest for cases — getCaseBinaryFeatures","text":"","code":"getCaseBinaryFeatures(   connectionHandler,   schema,   cTablePrefix = \"c_\",   cgTablePrefix = \"cg_\",   databaseTable = \"database_meta_data\",   targetIds = NULL,   outcomeIds = NULL,   analysisIds = c(3) )"},{"path":"/reference/getCaseBinaryFeatures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregate statistics of binary feature analysis IDs of interest for cases — getCaseBinaryFeatures","text":"connectionHandler connection handler connects database extracts sql queries.  Create connection handler via `ResultModelManager::ConnectionHandler$new()`. schema result database schema (e.g., 'main' sqlite) cTablePrefix prefix used characterization results tables cgTablePrefix prefix used cohort generator results tables databaseTable name table database details (default 'database_meta_data') targetIds vector integers corresponding target cohort IDs outcomeIds vector integers corresponding outcome cohort IDs analysisIds feature extraction analysis ID interest (e.g., 201 condition)","code":""},{"path":"/reference/getCaseBinaryFeatures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregate statistics of binary feature analysis IDs of interest for cases — getCaseBinaryFeatures","text":"Returns data.frame columns: databaseName name database targetName target cohort name targetId target cohort unique identifier outcomeName outcome name outcomeId outcome unique identifier minPriorObservation minimum required observation days prior index entry outcomeWashoutDays patients outcome occurring within number days prior index excluded (NA means exclusion) riskWindowStart number days ofset start anchor start time--risk startAnchor start anchor either target cohort start cohort end date riskWindowEnd number days ofset end anchor end time--risk endAnchor end anchor either target cohort start cohort end date covariateName name feature sumValue number cases feature value 1 averageValue mean feature value","code":""},{"path":"/reference/getCaseBinaryFeatures.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract aggregate statistics of binary feature analysis IDs of interest for cases — getCaseBinaryFeatures","text":"Specify connectionHandler, schema target/outcome cohort IDs","code":""},{"path":[]},{"path":"/reference/getCaseBinaryFeatures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregate statistics of binary feature analysis IDs of interest for cases — getCaseBinaryFeatures","text":"","code":"conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  cbf <- getCaseBinaryFeatures( connectionHandler = connectionHandler,  schema = 'main' )"},{"path":"/reference/getCaseContinuousFeatures.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregate statistics of continuous feature analysis IDs of interest for targets — getCaseContinuousFeatures","title":"Extract aggregate statistics of continuous feature analysis IDs of interest for targets — getCaseContinuousFeatures","text":"function extracts continuous feature extraction results cases corresponding specified target outcome cohorts.","code":""},{"path":"/reference/getCaseContinuousFeatures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregate statistics of continuous feature analysis IDs of interest for targets — getCaseContinuousFeatures","text":"","code":"getCaseContinuousFeatures(   connectionHandler,   schema,   cTablePrefix = \"c_\",   cgTablePrefix = \"cg_\",   databaseTable = \"database_meta_data\",   targetIds = NULL,   outcomeIds = NULL,   analysisIds = NULL )"},{"path":"/reference/getCaseContinuousFeatures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregate statistics of continuous feature analysis IDs of interest for targets — getCaseContinuousFeatures","text":"connectionHandler connection handler connects database extracts sql queries.  Create connection handler via `ResultModelManager::ConnectionHandler$new()`. schema result database schema (e.g., 'main' sqlite) cTablePrefix prefix used characterization results tables cgTablePrefix prefix used cohort generator results tables databaseTable name table database details (default 'database_meta_data') targetIds vector integers corresponding target cohort IDs outcomeIds vector integers corresponding outcome cohort IDs analysisIds feature extraction analysis ID interest (e.g., 201 condition)","code":""},{"path":"/reference/getCaseContinuousFeatures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregate statistics of continuous feature analysis IDs of interest for targets — getCaseContinuousFeatures","text":"Returns data.frame columns: databaseName name database targetName target cohort name targetId target cohort unique identifier outcomeName outcome name outcomeId outcome unique identifier minPriorObservation minimum required observation days prior index entry outcomeWashoutDays patients outcome occurring within number days prior index excluded (NA means exclusion) covariateName name feature covariateId id feature countValue number cases feature minValue minimum value observed feature maxValue maximum value observed feature averageValue mean value observed feature standardDeviation standard deviation value observed feature medianValue median value observed feature p10Value 10th percentile value observed feature p25Value 25th percentile value observed feature p75Value 75th percentile value observed feature p90Value 90th percentile value observed feature","code":""},{"path":"/reference/getCaseContinuousFeatures.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract aggregate statistics of continuous feature analysis IDs of interest for targets — getCaseContinuousFeatures","text":"Specify connectionHandler, schema target/outcome cohort IDs","code":""},{"path":[]},{"path":"/reference/getCaseContinuousFeatures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregate statistics of continuous feature analysis IDs of interest for targets — getCaseContinuousFeatures","text":"","code":"conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  ccf <- getCaseContinuousFeatures( connectionHandler = connectionHandler,  schema = 'main' )"},{"path":"/reference/getCaseCounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the outcome cohort counts result — getCaseCounts","title":"Extract the outcome cohort counts result — getCaseCounts","text":"function extracts outcome cohort counts across databases results specified target outcome cohorts.","code":""},{"path":"/reference/getCaseCounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the outcome cohort counts result — getCaseCounts","text":"","code":"getCaseCounts(   connectionHandler,   schema,   cTablePrefix = \"c_\",   cgTablePrefix = \"cg_\",   databaseTable = \"database_meta_data\",   targetIds = NULL,   outcomeIds = NULL )"},{"path":"/reference/getCaseCounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the outcome cohort counts result — getCaseCounts","text":"connectionHandler connection handler connects database extracts sql queries.  Create connection handler via `ResultModelManager::ConnectionHandler$new()`. schema result database schema (e.g., 'main' sqlite) cTablePrefix prefix used characterization results tables cgTablePrefix prefix used cohort generator results tables databaseTable name table database details (default 'database_meta_data') targetIds vector integers corresponding target cohort IDs outcomeIds vector integers corresponding outcome cohort IDs","code":""},{"path":"/reference/getCaseCounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the outcome cohort counts result — getCaseCounts","text":"Returns data.frame columns: databaseName name database targetName target cohort name targetId target cohort unique identifier outcomeName outcome name outcomeId outcome unique identifier rowCount number entries cohort personCount number people cohort minPriorObservation minimum required observation days prior index entry outcomeWashoutDays patients outcome occurring within number days prior index excluded (NA means exclusion) riskWindowStart number days ofset start anchor start time--risk startAnchor start anchor either target cohort start cohort end date riskWindowEnd number days ofset end anchor end time--risk endAnchor end anchor either target cohort start cohort end date","code":""},{"path":"/reference/getCaseCounts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the outcome cohort counts result — getCaseCounts","text":"Specify connectionHandler, schema target/outcome cohort IDs","code":""},{"path":[]},{"path":"/reference/getCaseCounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the outcome cohort counts result — getCaseCounts","text":"","code":"conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  cc <- getCaseCounts( connectionHandler = connectionHandler,  schema = 'main' )"},{"path":"/reference/getCharacterizationDemographics.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the binary age groups for the cases and targets — getCharacterizationDemographics","title":"Extract the binary age groups for the cases and targets — getCharacterizationDemographics","text":"function extracts age group feature extraction results cases targets corresponding specified target outcome cohorts.","code":""},{"path":"/reference/getCharacterizationDemographics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the binary age groups for the cases and targets — getCharacterizationDemographics","text":"","code":"getCharacterizationDemographics(   connectionHandler,   schema,   cTablePrefix = \"c_\",   cgTablePrefix = \"cg_\",   databaseTable = \"database_meta_data\",   targetId = NULL,   outcomeId = NULL,   type = \"age\" )"},{"path":"/reference/getCharacterizationDemographics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the binary age groups for the cases and targets — getCharacterizationDemographics","text":"connectionHandler connection handler connects database extracts sql queries.  Create connection handler via `ResultModelManager::ConnectionHandler$new()`. schema result database schema (e.g., 'main' sqlite) cTablePrefix prefix used characterization results tables cgTablePrefix prefix used cohort generator results tables databaseTable name table database details (default 'database_meta_data') targetId integer corresponding target cohort ID outcomeId integer corresponding outcome cohort ID type character 'age' 'sex'","code":""},{"path":"/reference/getCharacterizationDemographics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the binary age groups for the cases and targets — getCharacterizationDemographics","text":"Returns data.frame columns: databaseName name database targetName target cohort name targetId target cohort unique identifier outcomeName outcome name outcomeId outcome unique identifier minPriorObservation minimum required observation days prior index entry outcomeWashoutDays patients outcome occurring within number days prior index excluded (NA means exclusion) riskWindowStart number days ofset start anchor start time--risk startAnchor start anchor either target cohort start cohort end date riskWindowEnd number days ofset end anchor end time--risk endAnchor end anchor either target cohort start cohort end date covariateName name feature sumValue number cases feature value 1 averageValue mean feature value","code":""},{"path":"/reference/getCharacterizationDemographics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the binary age groups for the cases and targets — getCharacterizationDemographics","text":"Specify connectionHandler, schema target/outcome cohort IDs","code":""},{"path":[]},{"path":"/reference/getCharacterizationDemographics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the binary age groups for the cases and targets — getCharacterizationDemographics","text":"","code":"# example code  conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  ageData <- getCharacterizationDemographics( connectionHandler = connectionHandler,  schema = 'main' )"},{"path":"/reference/getCmDiagnosticsData.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the cohort method diagostic results — getCmDiagnosticsData","title":"Extract the cohort method diagostic results — getCmDiagnosticsData","text":"function extracts cohort method diagnostics examine whether analyses sufficiently powered checks different types bias.","code":""},{"path":"/reference/getCmDiagnosticsData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the cohort method diagostic results — getCmDiagnosticsData","text":"","code":"getCmDiagnosticsData(   connectionHandler,   schema,   cmTablePrefix = \"cm_\",   cgTablePrefix = \"cg_\",   databaseTable = \"database_meta_data\",   targetIds = NULL,   outcomeIds = NULL,   comparatorIds = NULL )"},{"path":"/reference/getCmDiagnosticsData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the cohort method diagostic results — getCmDiagnosticsData","text":"connectionHandler connection handler connects database extracts sql queries.  Create connection handler via `ResultModelManager::ConnectionHandler$new()`. schema result database schema (e.g., 'main' sqlite) cmTablePrefix prefix used cohort method results tables cgTablePrefix prefix used cohort generator results tables databaseTable name table database details (default 'database_meta_data') targetIds vector integers corresponding target cohort IDs outcomeIds vector integers corresponding outcome cohort IDs comparatorIds vector integers corresponding comparator cohort IDs","code":""},{"path":"/reference/getCmDiagnosticsData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the cohort method diagostic results — getCmDiagnosticsData","text":"Returns data.frame columns: databaseName name database analysisId analysis unique identifier description description analysis targetName target cohort name targetId target cohort unique identifier comparatorName comparator cohort name comparatorId comparator cohort unique identifier outcomeName outcome name outcomeId outcome cohort unique identifier maxSdm max allowed standardized difference means comparing target comparator PS adjustment ballance diagnostic diagnostic pass. sharedMaxSdm max allowed standardized difference means comparing target comparator PS adjustment ballance diagnostic diagnostic pass. equipoise bounds preference score determine whether subject equipoise. mdrr maximum passable minimum detectable relative risk (mdrr) value.  mdrr greater diagnostics fail. attritionFraction (depreciated) minmum attrition diagnostics fails. ease expected absolute systematic error (ease) measures residual bias. balanceDiagnostic whether balance diagnostic passed failed. sharedBalanceDiagnostic whether shared balance diagnostic passed failed. equipoiseDiagnostic whether equipose diagnostic passed failed. mdrrDiagnostic whether mdrr (power) diagnostic passed failed. attritionDiagnostic (depreciated) whether attrition diagnostic passed failed. easeDiagnostic whether ease diagnostic passed failed. unblind whether results can unblinded. summaryValue summary diagnostics results. FAIL, PASS number warnings.","code":""},{"path":"/reference/getCmDiagnosticsData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the cohort method diagostic results — getCmDiagnosticsData","text":"Specify connectionHandler, schema target/comparator/outcome cohort IDs","code":""},{"path":[]},{"path":"/reference/getCmDiagnosticsData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the cohort method diagostic results — getCmDiagnosticsData","text":"","code":"conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  cmDiag <- getCmDiagnosticsData(   connectionHandler = connectionHandler,    schema = 'main',   targetIds = 1,   outcomeIds = 3 )"},{"path":"/reference/getCmMetaEstimation.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the cohort method meta analysis results — getCmMetaEstimation","title":"Extract the cohort method meta analysis results — getCmMetaEstimation","text":"function extracts meta analysis estimation results cohort method.","code":""},{"path":"/reference/getCmMetaEstimation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the cohort method meta analysis results — getCmMetaEstimation","text":"","code":"getCmMetaEstimation(   connectionHandler,   schema,   cmTablePrefix = \"cm_\",   cgTablePrefix = \"cg_\",   esTablePrefix = \"es_\",   targetIds = NULL,   outcomeIds = NULL,   comparatorIds = NULL )"},{"path":"/reference/getCmMetaEstimation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the cohort method meta analysis results — getCmMetaEstimation","text":"connectionHandler connection handler connects database extracts sql queries.  Create connection handler via `ResultModelManager::ConnectionHandler$new()`. schema result database schema (e.g., 'main' sqlite) cmTablePrefix prefix used cohort method results tables cgTablePrefix prefix used cohort generator results tables esTablePrefix prefix used evidence synthesis results tables targetIds vector integers corresponding target cohort IDs outcomeIds vector integers corresponding outcome cohort IDs comparatorIds vector integers corresponding comparator cohort IDs","code":""},{"path":"/reference/getCmMetaEstimation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the cohort method meta analysis results — getCmMetaEstimation","text":"Returns data.frame columns: databaseName name database analysisId analysis unique identifier description description analysis targetName target cohort name targetId target cohort unique identifier comparatorName comparator cohort name comparatorId comparator cohort unique identifier outcomeName outcome name outcomeId outcome cohort unique identifier calibratedRr calibrated relative risk calibratedRrCi95Lb calibrated relative risk 95 percent confidence interval lower bound calibratedRrCi95Ub calibrated relative risk 95 percent confidence interval upper bound calibratedP two sided calibrated p value calibratedOneSidedP one sided calibrated p value calibratedLogRr calibrated relative risk logged calibratedSeLogRr standard error calibrated relative risk logged targetSubjects number people target cohort across included database comparatorSubjects number people comparator cohort across included database targetDays total number days risk across target cohort people across included database comparatorDays total number days risk across comparator cohort people across included database targetOutcomes total number outcomes occuring time risk target cohort people across included database comparatorOutcomes total number outcomes occuring time risk comparator cohort people across included database nDatabases number databases included","code":""},{"path":"/reference/getCmMetaEstimation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the cohort method meta analysis results — getCmMetaEstimation","text":"Specify connectionHandler, schema target/comparator/outcome cohort IDs","code":""},{"path":[]},{"path":"/reference/getCmMetaEstimation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the cohort method meta analysis results — getCmMetaEstimation","text":"","code":"conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  cmMeta <- getCmMetaEstimation(   connectionHandler = connectionHandler,    schema = 'main',   targetIds = 1,   outcomeIds = 3 ) #> Closing database connection #> Closing database connection #> Closing database connection"},{"path":"/reference/getCohortDefinitions.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the cohort definition details — getCohortDefinitions","title":"Extract the cohort definition details — getCohortDefinitions","text":"function extracts cohort definitions targets interest.","code":""},{"path":"/reference/getCohortDefinitions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the cohort definition details — getCohortDefinitions","text":"","code":"getCohortDefinitions(   connectionHandler,   schema,   cgTablePrefix = \"cg_\",   targetIds = NULL )"},{"path":"/reference/getCohortDefinitions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the cohort definition details — getCohortDefinitions","text":"connectionHandler connection handler connects database extracts sql queries.  Create connection handler via `ResultModelManager::ConnectionHandler$new()`. schema result database schema (e.g., 'main' sqlite) cgTablePrefix prefix used cohort generator results tables targetIds vector integers corresponding target cohort IDs","code":""},{"path":"/reference/getCohortDefinitions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the cohort definition details — getCohortDefinitions","text":"Returns data.frame columns:","code":""},{"path":"/reference/getCohortDefinitions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the cohort definition details — getCohortDefinitions","text":"Specify connectionHandler, schema target cohort IDs","code":""},{"path":[]},{"path":"/reference/getCohortDefinitions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the cohort definition details — getCohortDefinitions","text":"","code":"conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  cohortDef <- getCohortDefinitions(   connectionHandler = connectionHandler,    schema = 'main' )"},{"path":"/reference/getCohortSubsetDefinitions.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the cohort subset definition details — getCohortSubsetDefinitions","title":"Extract the cohort subset definition details — getCohortSubsetDefinitions","text":"function extracts cohort subset definitions subsets interest.","code":""},{"path":"/reference/getCohortSubsetDefinitions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the cohort subset definition details — getCohortSubsetDefinitions","text":"","code":"getCohortSubsetDefinitions(   connectionHandler,   schema,   cgTablePrefix = \"cg_\",   subsetIds = NULL )"},{"path":"/reference/getCohortSubsetDefinitions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the cohort subset definition details — getCohortSubsetDefinitions","text":"connectionHandler connection handler connects database extracts sql queries.  Create connection handler via `ResultModelManager::ConnectionHandler$new()`. schema result database schema (e.g., 'main' sqlite) cgTablePrefix prefix used cohort generator results tables subsetIds vector subset cohort ids NULL","code":""},{"path":"/reference/getCohortSubsetDefinitions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the cohort subset definition details — getCohortSubsetDefinitions","text":"Returns data.frame columns:","code":""},{"path":"/reference/getCohortSubsetDefinitions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the cohort subset definition details — getCohortSubsetDefinitions","text":"Specify connectionHandler, schema subset IDs","code":""},{"path":[]},{"path":"/reference/getCohortSubsetDefinitions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the cohort subset definition details — getCohortSubsetDefinitions","text":"","code":"conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  subsetDef <- getCohortSubsetDefinitions(   connectionHandler = connectionHandler,    schema = 'main' )"},{"path":"/reference/getContinuousCaseSeries.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to extract case series continuous feature characterization results — getContinuousCaseSeries","title":"A function to extract case series continuous feature characterization results — getContinuousCaseSeries","text":"function extract case series continuous feature characterization results","code":""},{"path":"/reference/getContinuousCaseSeries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to extract case series continuous feature characterization results — getContinuousCaseSeries","text":"","code":"getContinuousCaseSeries(   connectionHandler,   schema,   cTablePrefix = \"c_\",   cgTablePrefix = \"cg_\",   databaseTable = \"database_meta_data\",   targetId = NULL,   outcomeId = NULL )"},{"path":"/reference/getContinuousCaseSeries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to extract case series continuous feature characterization results — getContinuousCaseSeries","text":"connectionHandler connection handler connects database extracts sql queries.  Create connection handler via `ResultModelManager::ConnectionHandler$new()`. schema result database schema (e.g., 'main' sqlite) cTablePrefix prefix used characterization results tables cgTablePrefix prefix used cohort generator results tables databaseTable name table database details (default 'database_meta_data') targetId integer corresponding target cohort ID outcomeId integer corresponding outcome cohort ID","code":""},{"path":"/reference/getContinuousCaseSeries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to extract case series continuous feature characterization results — getContinuousCaseSeries","text":"data.frame characterization case series results","code":""},{"path":"/reference/getContinuousCaseSeries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A function to extract case series continuous feature characterization results — getContinuousCaseSeries","text":"Specify connectionHandler, schema target/outcome cohort IDs","code":""},{"path":[]},{"path":"/reference/getContinuousCaseSeries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to extract case series continuous feature characterization results — getContinuousCaseSeries","text":"","code":"conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  cs <- getContinuousCaseSeries(   connectionHandler = connectionHandler,    schema = 'main',   targetId = 1,    outcomeId = 3 )"},{"path":"/reference/getContinuousRiskFactors.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to extract non-case and case continuous characterization results — getContinuousRiskFactors","title":"A function to extract non-case and case continuous characterization results — getContinuousRiskFactors","text":"function extract non-case case continuous characterization results","code":""},{"path":"/reference/getContinuousRiskFactors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to extract non-case and case continuous characterization results — getContinuousRiskFactors","text":"","code":"getContinuousRiskFactors(   connectionHandler,   schema,   cTablePrefix = \"c_\",   cgTablePrefix = \"cg_\",   databaseTable = \"database_meta_data\",   targetId = NULL,   outcomeId = NULL,   analysisIds = NULL )"},{"path":"/reference/getContinuousRiskFactors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to extract non-case and case continuous characterization results — getContinuousRiskFactors","text":"connectionHandler connection handler connects database extracts sql queries.  Create connection handler via `ResultModelManager::ConnectionHandler$new()`. schema result database schema (e.g., 'main' sqlite) cTablePrefix prefix used characterization results tables cgTablePrefix prefix used cohort generator results tables databaseTable name table database details (default 'database_meta_data') targetId integer corresponding target cohort ID outcomeId integer corresponding outcome cohort ID analysisIds feature extraction analysis ID interest (e.g., 201 condition)","code":""},{"path":"/reference/getContinuousRiskFactors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to extract non-case and case continuous characterization results — getContinuousRiskFactors","text":"data.frame characterization results cases non-cases","code":""},{"path":"/reference/getContinuousRiskFactors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A function to extract non-case and case continuous characterization results — getContinuousRiskFactors","text":"Specify connectionHandler, schema target/outcome cohort IDs","code":""},{"path":[]},{"path":"/reference/getContinuousRiskFactors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to extract non-case and case continuous characterization results — getContinuousRiskFactors","text":"","code":"conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  rf <- getContinuousRiskFactors(   connectionHandler = connectionHandler,    schema = 'main',   targetId = 1,    outcomeId = 3 )"},{"path":"/reference/getDechallengeRechallenge.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the dechallenge rechallenge results — getDechallengeRechallenge","title":"Extract the dechallenge rechallenge results — getDechallengeRechallenge","text":"function extracts dechallenge rechallenge results across databases specified target outcome cohorts.","code":""},{"path":"/reference/getDechallengeRechallenge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the dechallenge rechallenge results — getDechallengeRechallenge","text":"","code":"getDechallengeRechallenge(   connectionHandler,   schema,   cTablePrefix = \"c_\",   cgTablePrefix = \"cg_\",   databaseTable = \"database_meta_data\",   targetIds = NULL,   outcomeIds = NULL )"},{"path":"/reference/getDechallengeRechallenge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the dechallenge rechallenge results — getDechallengeRechallenge","text":"connectionHandler connection handler connects database extracts sql queries.  Create connection handler via `ResultModelManager::ConnectionHandler$new()`. schema result database schema (e.g., 'main' sqlite) cTablePrefix prefix used characterization results tables cgTablePrefix prefix used cohort generator results tables databaseTable name table database details (default 'database_meta_data') targetIds vector integers corresponding target cohort IDs outcomeIds vector integers corresponding outcome cohort IDs","code":""},{"path":"/reference/getDechallengeRechallenge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the dechallenge rechallenge results — getDechallengeRechallenge","text":"Returns data.frame columns: databaseName name database targetName target cohort name targetId target cohort unique identifier outcomeName outcome name outcomeId outcome unique identifier dechallengeStopInterval integer specifying much time add cohort_end determining whether event starts cohort ends dechallengeEvaluationWindow period time evaluated outcome recurrence discontinuation exposure, among patients challenge outcomes numExposureEras Distinct number exposure events (.e. drug eras) given target cohort numPersonsExposed Distinct number people exposed target cohort. person must least 1 day exposure included numCases Distinct number persons outcome cohort. person must least 1 day observation time included dechallengeAttempt Distinct count people observable time discontinuation exposure era challenge outcome occurred dechallengeFail Among people challenge outcomes, distinct number people outcomes dechallengeEvaluationWindow dechallengeSuccess Among people challenge outcomes, distinct number people without outcomes dechallengeEvaluationWindow rechallengeAttempt Number people new exposure era occurrence outcome prior exposure era rechallengeFail Number people new exposure era outcome occurred, occurrence outcome prior exposure era rechallengeSuccess Number people new exposure era outcome occur, occurrence outcome prior exposure era pctDechallengeAttempt Percent people observable time discontinuation exposure era challenge outcome occurred pctDechallengeFail Among people challenge outcomes, percent people without outcomes dechallengeEvaluationWindow pctDechallengeSuccess Among people challenge outcomes, percent people outcomes dechallengeEvaluationWindow pctRechallengeAttempt Percent people new exposure era occurrence outcome prior exposure era pctRechallengeFail Percent people new exposure era outcome occur, occurrence outcome prior exposure era pctRechallengeSuccess Percent people new exposure era outcome occurred, occurrence outcome prior exposure era","code":""},{"path":"/reference/getDechallengeRechallenge.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the dechallenge rechallenge results — getDechallengeRechallenge","text":"Specify connectionHandler, schema target/outcome cohort IDs","code":""},{"path":[]},{"path":"/reference/getDechallengeRechallenge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the dechallenge rechallenge results — getDechallengeRechallenge","text":"","code":"conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  dcrc <- getDechallengeRechallenge( connectionHandler = connectionHandler,  schema = 'main' )"},{"path":"/reference/getExampleConnectionDetails.html","id":null,"dir":"Reference","previous_headings":"","what":"create a connection detail for an example OHDSI results database — getExampleConnectionDetails","title":"create a connection detail for an example OHDSI results database — getExampleConnectionDetails","text":"returns object class `ConnectionDetails` lets connect via `DatabaseConnector::connect()` example result database.","code":""},{"path":"/reference/getExampleConnectionDetails.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create a connection detail for an example OHDSI results database — getExampleConnectionDetails","text":"","code":"getExampleConnectionDetails()"},{"path":"/reference/getExampleConnectionDetails.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create a connection detail for an example OHDSI results database — getExampleConnectionDetails","text":"object class `ConnectionDetails` details connect example OHDSI result database","code":""},{"path":"/reference/getExampleConnectionDetails.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"create a connection detail for an example OHDSI results database — getExampleConnectionDetails","text":"Finds location example result database package calls `DatabaseConnector::createConnectionDetails` create `ConnectionDetails` object connecting database.","code":""},{"path":[]},{"path":"/reference/getExampleConnectionDetails.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"create a connection detail for an example OHDSI results database — getExampleConnectionDetails","text":"","code":"conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver"},{"path":"/reference/getIncidenceRates.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the cohort incidence result — getIncidenceRates","title":"Extract the cohort incidence result — getIncidenceRates","text":"function extracts incidence rates across databases results specified target outcome cohorts.","code":""},{"path":"/reference/getIncidenceRates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the cohort incidence result — getIncidenceRates","text":"","code":"getIncidenceRates(   connectionHandler,   schema,   ciTablePrefix = \"ci_\",   cgTablePrefix = \"cg_\",   databaseTable = \"database_meta_data\",   targetIds = NULL,   outcomeIds = NULL )"},{"path":"/reference/getIncidenceRates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the cohort incidence result — getIncidenceRates","text":"connectionHandler connection handler connects database extracts sql queries.  Create connection handler via `ResultModelManager::ConnectionHandler$new()`. schema result database schema (e.g., 'main' sqlite) ciTablePrefix prefix used cohort incidence results tables cgTablePrefix prefix used cohort generator results tables databaseTable name table database details (default 'database_meta_data') targetIds vector integers corresponding target cohort IDs outcomeIds vector integers corresponding outcome cohort IDs","code":""},{"path":"/reference/getIncidenceRates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the cohort incidence result — getIncidenceRates","text":"Returns data.frame columns: databaseName name database targetName target cohort name targetId target cohort unique identifier outcomeName outcome name outcomeId outcome unique identifier cleanWindow clean windown around outcome subgroupName name result subgroup ageGroupName name result age group genderName name result gender group startYear name result start year tarStartWith time risk start reference tarStartOffset time risk start offset reference tarEndWith time risk end reference tarEndOffset time risk end offset reference personsAtRiskPe persons risk per event personsAtRisk persons risk personDaysPe person days per event personDays person days personOutcomesPe person outcome per event personOutcomes persons outcome outcomesPe number outcome per event outcomes number outcome incidenceProportionP100p incidence proportion per 100 persons incidenceRateP100py incidence rate per 100 person years","code":""},{"path":"/reference/getIncidenceRates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the cohort incidence result — getIncidenceRates","text":"Specify connectionHandler, schema target/outcome cohort IDs","code":""},{"path":[]},{"path":"/reference/getIncidenceRates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the cohort incidence result — getIncidenceRates","text":"","code":"conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  ir <- getIncidenceRates( connectionHandler = connectionHandler,  schema = 'main' )"},{"path":"/reference/getPredictionCohorts.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a complete set of cohorts used in the prediction results — getPredictionCohorts","title":"Extract a complete set of cohorts used in the prediction results — getPredictionCohorts","text":"function extracts target outcome cohorts used develop model results","code":""},{"path":"/reference/getPredictionCohorts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a complete set of cohorts used in the prediction results — getPredictionCohorts","text":"","code":"getPredictionCohorts(   connectionHandler,   schema,   plpTablePrefix = \"plp_\",   cgTablePrefix = \"cg_\" )"},{"path":"/reference/getPredictionCohorts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a complete set of cohorts used in the prediction results — getPredictionCohorts","text":"connectionHandler connection handler connects database extracts sql queries.  Create connection handler via `ResultModelManager::ConnectionHandler$new()`. schema result database schema (e.g., 'main' sqlite) plpTablePrefix prefix used patient level prediction results tables cgTablePrefix prefix used cohort generator results tables","code":""},{"path":"/reference/getPredictionCohorts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a complete set of cohorts used in the prediction results — getPredictionCohorts","text":"Returns data.frame columns: cohortId cohort definition ID cohortName name cohort type whether cohort used target outcome cohort","code":""},{"path":"/reference/getPredictionCohorts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract a complete set of cohorts used in the prediction results — getPredictionCohorts","text":"Specify connectionHandler, resultDatabaseSettings targetIds outcomeIds restrict models ","code":""},{"path":[]},{"path":"/reference/getPredictionCohorts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a complete set of cohorts used in the prediction results — getPredictionCohorts","text":"","code":"conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  predCohorts <- getPredictionCohorts(   connectionHandler = connectionHandler,    schema = 'main' )"},{"path":"/reference/getPredictionDiagnosticTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract specific diagnostic table — getPredictionDiagnosticTable","title":"Extract specific diagnostic table — getPredictionDiagnosticTable","text":"function extracts specified diagnostic table","code":""},{"path":"/reference/getPredictionDiagnosticTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract specific diagnostic table — getPredictionDiagnosticTable","text":"","code":"getPredictionDiagnosticTable(   connectionHandler,   schema,   plpTablePrefix = \"plp_\",   table = \"diagnostic_participants\",   diagnosticId = NULL )"},{"path":"/reference/getPredictionDiagnosticTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract specific diagnostic table — getPredictionDiagnosticTable","text":"connectionHandler connection handler connects database extracts sql queries.  Create connection handler via `ResultModelManager::ConnectionHandler$new()`. schema result database schema (e.g., 'main' sqlite) plpTablePrefix prefix used patient level prediction results tables table table extract diagnosticId (optional) restrict input diagnosticId","code":""},{"path":"/reference/getPredictionDiagnosticTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract specific diagnostic table — getPredictionDiagnosticTable","text":"Returns data.frame specified table","code":""},{"path":"/reference/getPredictionDiagnosticTable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract specific diagnostic table — getPredictionDiagnosticTable","text":"Specify connectionHandler, resultDatabaseSettings, table interest (optionally) diagnosticId filter ","code":""},{"path":[]},{"path":"/reference/getPredictionDiagnosticTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract specific diagnostic table — getPredictionDiagnosticTable","text":"","code":"conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  diagPred <- getPredictionDiagnosticTable(   connectionHandler = connectionHandler,    schema = 'main',   table = 'diagnostic_predictors' )"},{"path":"/reference/getPredictionDiagnostics.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the model design diagnostics for a specific development database — getPredictionDiagnostics","title":"Extract the model design diagnostics for a specific development database — getPredictionDiagnostics","text":"function extracts PROBAST diagnostics","code":""},{"path":"/reference/getPredictionDiagnostics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the model design diagnostics for a specific development database — getPredictionDiagnostics","text":"","code":"getPredictionDiagnostics(   connectionHandler,   schema,   plpTablePrefix = \"plp_\",   cgTablePrefix = \"cg_\",   databaseTable = \"database_meta_data\",   databaseTablePrefix = \"\",   modelDesignId = NULL,   threshold1_2 = 0.9 )"},{"path":"/reference/getPredictionDiagnostics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the model design diagnostics for a specific development database — getPredictionDiagnostics","text":"connectionHandler connection handler connects database extracts sql queries.  Create connection handler via `ResultModelManager::ConnectionHandler$new()`. schema result database schema (e.g., 'main' sqlite) plpTablePrefix prefix used patient level prediction results tables cgTablePrefix prefix used cohort generator results tables databaseTable name table database details (default 'database_meta_data') databaseTablePrefix prefix database table either ” 'plp_' modelDesignId identifier model design  restrict results threshold1_2 threshold probast 1.2","code":""},{"path":"/reference/getPredictionDiagnostics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the model design diagnostics for a specific development database — getPredictionDiagnostics","text":"Returns data.frame columns: modelDesignId unique identifier model design diagnosticId unique identifier diagnostic result developmentDatabaseName name database used develop model developmentTargetName name development target population developmentOutcomeName name development outcome probast1_1 appropriate data sources used, e.g., cohort, RCT, nested case-control study data? probast1_2 inclusions exclusions paticipants appropriate? probast2_1 predictors defined assessed similar way participants? probast2_2 predictors assessments made without knowledge outcome data? probast2_3 predictors available time model intended used? probast3_4 outcome defined determined similar way participants? probast3_6 time interval predictor assessment outcome determination appropriate? probast4_1 reasonable number participants outcome?","code":""},{"path":"/reference/getPredictionDiagnostics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the model design diagnostics for a specific development database — getPredictionDiagnostics","text":"Specify connectionHandler, resultDatabaseSettings (optionally) modelDesignId threshold1_2 threshold value use PROBAST 1.2","code":""},{"path":[]},{"path":"/reference/getPredictionDiagnostics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the model design diagnostics for a specific development database — getPredictionDiagnostics","text":"","code":"conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  diag <- getPredictionDiagnostics(   connectionHandler = connectionHandler,    schema = 'main' )"},{"path":"/reference/getPredictionHyperParamSearch.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract hyper parameters details — getPredictionHyperParamSearch","title":"Extract hyper parameters details — getPredictionHyperParamSearch","text":"function extracts hyper parameters details","code":""},{"path":"/reference/getPredictionHyperParamSearch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract hyper parameters details — getPredictionHyperParamSearch","text":"","code":"getPredictionHyperParamSearch(   connectionHandler,   schema,   plpTablePrefix = \"plp_\",   modelDesignId = NULL,   databaseId = NULL )"},{"path":"/reference/getPredictionHyperParamSearch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract hyper parameters details — getPredictionHyperParamSearch","text":"connectionHandler connection handler connects database extracts sql queries.  Create connection handler via `ResultModelManager::ConnectionHandler$new()`. schema result database schema (e.g., 'main' sqlite) plpTablePrefix prefix used patient level prediction results tables modelDesignId identifier model design  restrict databaseId identifier development database restrict  ","code":""},{"path":"/reference/getPredictionHyperParamSearch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract hyper parameters details — getPredictionHyperParamSearch","text":"Returns data.frame columns: metric hyperparameter optimization metric fold fold cross validation value metric value fold specified hyperparameter combination plus columns hyperparameters values","code":""},{"path":"/reference/getPredictionHyperParamSearch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract hyper parameters details — getPredictionHyperParamSearch","text":"Specify connectionHandler, resultDatabaseSettings, modelDesignId databaseId","code":""},{"path":[]},{"path":"/reference/getPredictionHyperParamSearch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract hyper parameters details — getPredictionHyperParamSearch","text":"","code":"conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  hyperParams <- getPredictionHyperParamSearch(   connectionHandler = connectionHandler,    schema = 'main' ) #> Warning: Please enter a modelDesignId and databaseId"},{"path":"/reference/getPredictionIntercept.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract model interception (for logistic regression) — getPredictionIntercept","title":"Extract model interception (for logistic regression) — getPredictionIntercept","text":"function extracts interception value","code":""},{"path":"/reference/getPredictionIntercept.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract model interception (for logistic regression) — getPredictionIntercept","text":"","code":"getPredictionIntercept(   connectionHandler,   schema,   plpTablePrefix = \"plp_\",   modelDesignId = NULL,   databaseId = NULL )"},{"path":"/reference/getPredictionIntercept.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract model interception (for logistic regression) — getPredictionIntercept","text":"connectionHandler connection handler connects database extracts sql queries.  Create connection handler via `ResultModelManager::ConnectionHandler$new()`. schema result database schema (e.g., 'main' sqlite) plpTablePrefix prefix used patient level prediction results tables modelDesignId identifier model design  restrict databaseId identifier development database restrict  ","code":""},{"path":"/reference/getPredictionIntercept.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract model interception (for logistic regression) — getPredictionIntercept","text":"Returns single value corresponding model intercept NULL logistic regression model","code":""},{"path":"/reference/getPredictionIntercept.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract model interception (for logistic regression) — getPredictionIntercept","text":"Specify connectionHandler, resultDatabaseSettings, modelDesignId databaseId","code":""},{"path":[]},{"path":"/reference/getPredictionIntercept.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract model interception (for logistic regression) — getPredictionIntercept","text":"","code":"conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  intercepts <- getPredictionIntercept(   connectionHandler = connectionHandler,    schema = 'main' ) #> Warning: Please enter a modelDesignId and databaseId"},{"path":"/reference/getPredictionModelDesigns.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the model designs and aggregate performances for the prediction results — getPredictionModelDesigns","title":"Extract the model designs and aggregate performances for the prediction results — getPredictionModelDesigns","text":"function extracts model design settings min/max/mean AUROC values models developed using model design across databases","code":""},{"path":"/reference/getPredictionModelDesigns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the model designs and aggregate performances for the prediction results — getPredictionModelDesigns","text":"","code":"getPredictionModelDesigns(   connectionHandler,   schema,   plpTablePrefix = \"plp_\",   cgTablePrefix = \"cg_\",   targetIds = NULL,   outcomeIds = NULL )"},{"path":"/reference/getPredictionModelDesigns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the model designs and aggregate performances for the prediction results — getPredictionModelDesigns","text":"connectionHandler connection handler connects database extracts sql queries.  Create connection handler via `ResultModelManager::ConnectionHandler$new()`. schema result database schema (e.g., 'main' sqlite) plpTablePrefix prefix used patient level prediction results tables cgTablePrefix prefix used cohort generator results tables targetIds vector integers corresponding target cohort IDs outcomeIds vector integers corresponding outcome cohort IDs","code":""},{"path":"/reference/getPredictionModelDesigns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the model designs and aggregate performances for the prediction results — getPredictionModelDesigns","text":"Returns data.frame columns: modelDesignId unique identifier database model design modelType type classifier surival model developmentTargetId unique identifier development target ID developmentTargetName name development target cohort developmentTargetJson json target cohort developmentOutcomeId unique identifier development outcome ID developmentOutcomeName name development outcome cohort timeAtRisk time risk string developmentOutcomeJson json outcome cohort covariateSettingsJson covariate settings json populationSettingsJson population settings json tidyCovariatesSettingsJson tidy covariate settings json plpDataSettingsJson plp data extraction settings json featureEngineeringSettingsJson feature engineering settings json splitSettingsJson split settings json sampleSettingsJson sample settings json minAuroc min AUROC value models developed using model design across databases meanAuroc mean AUROC value models developed using model design across databases maxAuroc max AUROC value models developed using model design across databases noDiagnosticDatabases number databases model design diagnostics generated noDevelopmentDatabases number databases model design used develop models noValidationDatabases number databases models developed using model design externally validated","code":""},{"path":"/reference/getPredictionModelDesigns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the model designs and aggregate performances for the prediction results — getPredictionModelDesigns","text":"Specify connectionHandler, resultDatabaseSettings (optionally) targetIds outcomeIds restrict model designs ","code":""},{"path":[]},{"path":"/reference/getPredictionModelDesigns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the model designs and aggregate performances for the prediction results — getPredictionModelDesigns","text":"","code":"conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  modDesign <- getPredictionModelDesigns(   connectionHandler = connectionHandler,    schema = 'main' )"},{"path":"/reference/getPredictionPerformanceTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract specific results table — getPredictionPerformanceTable","title":"Extract specific results table — getPredictionPerformanceTable","text":"function extracts specified table","code":""},{"path":"/reference/getPredictionPerformanceTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract specific results table — getPredictionPerformanceTable","text":"","code":"getPredictionPerformanceTable(   connectionHandler,   schema,   plpTablePrefix = \"plp_\",   table = \"attrition\",   performanceId = NULL )"},{"path":"/reference/getPredictionPerformanceTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract specific results table — getPredictionPerformanceTable","text":"connectionHandler connection handler connects database extracts sql queries.  Create connection handler via `ResultModelManager::ConnectionHandler$new()`. schema result database schema (e.g., 'main' sqlite) plpTablePrefix prefix used patient level prediction results tables table table extract performanceId (optional) restrict input performanceId","code":""},{"path":"/reference/getPredictionPerformanceTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract specific results table — getPredictionPerformanceTable","text":"Returns data.frame specified table","code":""},{"path":"/reference/getPredictionPerformanceTable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract specific results table — getPredictionPerformanceTable","text":"Specify connectionHandler, resultDatabaseSettings, table interest (optionally) performanceId filter ","code":""},{"path":[]},{"path":"/reference/getPredictionPerformanceTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract specific results table — getPredictionPerformanceTable","text":"","code":"conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  attrition <- getPredictionPerformanceTable(   connectionHandler = connectionHandler,    schema = 'main',   table = 'attrition' )"},{"path":"/reference/getPredictionPerformances.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the model performances — getPredictionPerformances","title":"Extract the model performances — getPredictionPerformances","text":"function extracts model performances","code":""},{"path":"/reference/getPredictionPerformances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the model performances — getPredictionPerformances","text":"","code":"getPredictionPerformances(   connectionHandler,   schema,   plpTablePrefix = \"plp_\",   cgTablePrefix = \"cg_\",   databaseTable = \"database_meta_data\",   databaseTablePrefix = \"\",   modelDesignId = NULL,   developmentDatabaseId = NULL )"},{"path":"/reference/getPredictionPerformances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the model performances — getPredictionPerformances","text":"connectionHandler connection handler connects database extracts sql queries.  Create connection handler via `ResultModelManager::ConnectionHandler$new()`. schema result database schema (e.g., 'main' sqlite) plpTablePrefix prefix used patient level prediction results tables cgTablePrefix prefix used cohort generator results tables databaseTable name table database details (default 'database_meta_data') databaseTablePrefix prefix database table, either ” 'plp_' modelDesignId identifier model design  restrict results developmentDatabaseId identifier development database restrict results ","code":""},{"path":"/reference/getPredictionPerformances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the model performances — getPredictionPerformances","text":"Returns data.frame columns: performanceId unique identifier performance modelDesignId unique identifier model design developmentDatabaseId unique identifier database used develop model validationDatabaseId unique identifier database used validate model developmentTargetId unique cohort id development target population developmentTargetName name development target population developmentOutcomeId unique cohort id development outcome developmentOutcomeName name development outcome developmentDatabase name database used develop model validationDatabase name database used validate model validationTargetName name validation target population validationOutcomeName name validation outcome timeStamp date/time analysis occurred auroc test/validation AUROC value model auroc95lb test/validation lower bound 95 percent CI AUROC value model auroc95ub test/validation upper bound 95 percent CI AUROC value model calibrationInLarge test/validation calibration large value model eStatistic test/validation calibration e-statistic value model brierScore test/validation brier value model auprc test/validation discrimination AUPRC value model populationSize test/validation population size used develop model outcomeCount test/validation outcome count used develop model evalPercent percentage development data used test set outcomePercent outcome percent development data validationTimeAtRisk time risk validation predictionResultType development validation","code":""},{"path":"/reference/getPredictionPerformances.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the model performances — getPredictionPerformances","text":"Specify connectionHandler, resultDatabaseSettings (optionally) modelDesignId /developmentDatabaseId restrict models ","code":""},{"path":[]},{"path":"/reference/getPredictionPerformances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the model performances — getPredictionPerformances","text":"","code":"conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  perf <- getPredictionPerformances(   connectionHandler = connectionHandler,    schema = 'main' )"},{"path":"/reference/getPredictionTopPredictors.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the top N predictors per model — getPredictionTopPredictors","title":"Extract the top N predictors per model — getPredictionTopPredictors","text":"function extracts top N predictors per model prediction results tables","code":""},{"path":"/reference/getPredictionTopPredictors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the top N predictors per model — getPredictionTopPredictors","text":"","code":"getPredictionTopPredictors(   connectionHandler,   schema,   plpTablePrefix = \"plp_\",   cgTablePrefix = \"cg_\",   targetIds = NULL,   outcomeIds = NULL,   numberPredictors = 100 )"},{"path":"/reference/getPredictionTopPredictors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the top N predictors per model — getPredictionTopPredictors","text":"connectionHandler connection handler connects database extracts sql queries.  Create connection handler via `ResultModelManager::ConnectionHandler$new()`. schema result database schema (e.g., 'main' sqlite) plpTablePrefix prefix used patient level prediction results tables cgTablePrefix prefix used cohort generator results tables targetIds vector integers corresponding target cohort IDs outcomeIds vector integers corresponding outcome cohort IDs numberPredictors number predictors per model return","code":""},{"path":"/reference/getPredictionTopPredictors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the top N predictors per model — getPredictionTopPredictors","text":"Returns data.frame columns: databaseName name database model developed tarStartDay time--risk start day tarStartAnchor whether time--risk start relative cohort start end tarEndDay time--risk end day tarEndAnchor whether time--risk end relative cohort start end performanceId unique identifier performance covariateId FeatureExtraction covariate identifier covariateName name covariate conceptId covariates corresponding concept 0 covariateValue feature importance coefficient value covariateCount many people covariate covariateMean fraction target population covariate covariateStDev standard deviation withNoOutcomeCovariateCount number target population without outcome covariate withNoOutcomeCovariateMean fraction target population without outcome covariate withNoOutcomeCovariateStDev covariate standard deviation target population without outcome withOutcomeCovariateCount number target population outcome covariate withOutcomeCovariateMean fraction target population outcome covariate withOutcomeCovariateStDev covariate standard deviation target population outcome standardizedMeanDiff standardized mean difference comparing target population outcome without outcome rn row number showing covariate rank","code":""},{"path":"/reference/getPredictionTopPredictors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the top N predictors per model — getPredictionTopPredictors","text":"Specify connectionHandler, resultDatabaseSettings (optionally) targetIds outcomeIds restrict models ","code":""},{"path":[]},{"path":"/reference/getPredictionTopPredictors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the top N predictors per model — getPredictionTopPredictors","text":"","code":"conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  topPreds <- getPredictionTopPredictors(   connectionHandler = connectionHandler,    schema = 'main',   targetIds = 1,   outcomeIds = 3 )"},{"path":"/reference/getSccsDiagnosticsData.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the self controlled case series (sccs) diagostic results — getSccsDiagnosticsData","title":"Extract the self controlled case series (sccs) diagostic results — getSccsDiagnosticsData","text":"function extracts sccs diagnostics examine whether analyses sufficiently powered checks different types bias.","code":""},{"path":"/reference/getSccsDiagnosticsData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the self controlled case series (sccs) diagostic results — getSccsDiagnosticsData","text":"","code":"getSccsDiagnosticsData(   connectionHandler,   schema,   sccsTablePrefix = \"sccs_\",   cgTablePrefix = \"cg_\",   databaseTable = \"database_meta_data\",   targetIds = NULL,   outcomeIds = NULL )"},{"path":"/reference/getSccsDiagnosticsData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the self controlled case series (sccs) diagostic results — getSccsDiagnosticsData","text":"connectionHandler connection handler connects database extracts sql queries.  Create connection handler via `ResultModelManager::ConnectionHandler$new()`. schema result database schema (e.g., 'main' sqlite) sccsTablePrefix prefix used cohort generator results tables cgTablePrefix prefix used cohort generator results tables databaseTable name table database details (default 'database_meta_data') targetIds vector integers corresponding target cohort IDs outcomeIds vector integers corresponding outcome cohort IDs","code":""},{"path":"/reference/getSccsDiagnosticsData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the self controlled case series (sccs) diagostic results — getSccsDiagnosticsData","text":"Returns data.frame columns: databaseName database name analysisId analysis unique identifier description analysis description targetName target name targetId target cohort id outcomeName outcome name outcomeId outcome cohort id covariateName whether main secondary analysis mdrr maximum passable minimum detectable relative risk (mdrr) value.  mdrr greater diagnostics fail. ease expected absolute systematic error (ease) measures residual bias. timeTrendP p whether mean monthly ratio observed expected greater 1.25. preExposureP One-sided p-value whether rate expore higher , null difference. mdrrDiagnostic whether mdrr (power) diagnostic passed failed. easeDiagnostic whether ease diagnostic passed failed. timeTrendDiagnostic Pass / warning / fail / evaluated classification time trend (unstalbe months) diagnostic. preExposureDiagnostic Pass / warning / fail / evaluated classification time trend (unstalbe months) diagnostic. unblind whether results can unblinded. unblindForEvidenceSynthesis whether results can unblinded meta analysis. summaryValue summary diagnostics results. FAIL, PASS number warnings.","code":""},{"path":"/reference/getSccsDiagnosticsData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the self controlled case series (sccs) diagostic results — getSccsDiagnosticsData","text":"Specify connectionHandler, schema target/outcome cohort IDs","code":""},{"path":[]},{"path":"/reference/getSccsDiagnosticsData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the self controlled case series (sccs) diagostic results — getSccsDiagnosticsData","text":"","code":"conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  sccsDiag <- getSccsDiagnosticsData(   connectionHandler = connectionHandler,    schema = 'main',   targetIds = 1,   outcomeIds = 3 )"},{"path":"/reference/getSccsEstimation.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the self controlled case series (sccs) results — getSccsEstimation","title":"Extract the self controlled case series (sccs) results — getSccsEstimation","text":"function extracts single database sccs estimates","code":""},{"path":"/reference/getSccsEstimation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the self controlled case series (sccs) results — getSccsEstimation","text":"","code":"getSccsEstimation(   connectionHandler,   schema,   sccsTablePrefix = \"sccs_\",   cgTablePrefix = \"cg_\",   databaseTable = \"database_meta_data\",   targetIds = NULL,   outcomeIds = NULL )"},{"path":"/reference/getSccsEstimation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the self controlled case series (sccs) results — getSccsEstimation","text":"connectionHandler connection handler connects database extracts sql queries.  Create connection handler via `ResultModelManager::ConnectionHandler$new()`. schema result database schema (e.g., 'main' sqlite) sccsTablePrefix prefix used cohort generator results tables cgTablePrefix prefix used cohort generator results tables databaseTable name table database details (default 'database_meta_data') targetIds vector integers corresponding target cohort IDs outcomeIds vector integers corresponding outcome cohort IDs","code":""},{"path":"/reference/getSccsEstimation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the self controlled case series (sccs) results — getSccsEstimation","text":"Returns data.frame columns: databaseName database name analysisId analysis unique identifier description analysis description targetName target name targetId target cohort id outcomeName outcome name outcomeId outcome cohort id covariateName whether main secondary analysis outcomeSubjects number subjects least one outcome. outcomeEvents number outcome events. outcomeObservationPeriods number observation periods containing least one outcome. covariateSubjects number subjects covariate. covariateDays total covariate time days. covariateEras number continuous eras covariate. covariateOutcomes number outcomes observed covariate time. observedDays number days subjects observed. rr relative risk ci95Lb lower bound 95 percent confidence interval relative risk ci95Ub upper bound 95 percent confidence interval relative risk p p-value relative risk logRr log relative risk seLogRr standard error log relative risk calibratedRr calibrated relative risk calibratedCi95Lb lower bound 95 percent confidence interval calibrated relative risk calibratedCi95Ub upper bound 95 percent confidence interval calibrated relative risk calibratedP calibrated p-value calibratedLogRr calibrated log relative risk calibratedSeLogRr calibrated log relative risk standard error llr log likelihood ratio (MLE vs null hypothesis effect). mdrr minimum detectable relative risk. unblind Whether results can unblinded","code":""},{"path":"/reference/getSccsEstimation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the self controlled case series (sccs) results — getSccsEstimation","text":"Specify connectionHandler, schema target/outcome cohort IDs","code":""},{"path":[]},{"path":"/reference/getSccsEstimation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the self controlled case series (sccs) results — getSccsEstimation","text":"","code":"conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  sccsEst <- getSccsEstimation(   connectionHandler = connectionHandler,    schema = 'main',   targetIds = 1,   outcomeIds = 3 )"},{"path":"/reference/getSccsMetaEstimation.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the self controlled case series (sccs) meta analysis results — getSccsMetaEstimation","title":"Extract the self controlled case series (sccs) meta analysis results — getSccsMetaEstimation","text":"function extracts meta analysis estimation results sccs.","code":""},{"path":"/reference/getSccsMetaEstimation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the self controlled case series (sccs) meta analysis results — getSccsMetaEstimation","text":"","code":"getSccsMetaEstimation(   connectionHandler,   schema,   sccsTablePrefix = \"sccs_\",   cgTablePrefix = \"cg_\",   esTablePrefix = \"es_\",   targetIds = NULL,   outcomeIds = NULL )"},{"path":"/reference/getSccsMetaEstimation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the self controlled case series (sccs) meta analysis results — getSccsMetaEstimation","text":"connectionHandler connection handler connects database extracts sql queries.  Create connection handler via `ResultModelManager::ConnectionHandler$new()`. schema result database schema (e.g., 'main' sqlite) sccsTablePrefix prefix used cohort generator results tables cgTablePrefix prefix used cohort generator results tables esTablePrefix prefix used evidence synthesis results tables targetIds vector integers corresponding target cohort IDs outcomeIds vector integers corresponding outcome cohort IDs","code":""},{"path":"/reference/getSccsMetaEstimation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the self controlled case series (sccs) meta analysis results — getSccsMetaEstimation","text":"Returns data.frame columns: databaseName database name analysisId analysis unique identifier description analysis description targetName target name targetId target cohort id outcomeName outcome name outcomeId outcome cohort id covariateName whether main secondary analysis outcomeSubjects number subjects least one outcome. outcomeEvents number outcome events. outcomeObservationPeriods number observation periods containing least one outcome. covariateSubjects number subjects covariate. covariateDays total covariate time days. covariateEras number continuous eras covariate. covariateOutcomes number outcomes observed covariate time. observedDays number days subjects observed. calibratedRr calibrated relative risk calibratedCi95Lb lower bound 95 percent confidence interval calibrated relative risk calibratedCi95Ub upper bound 95 percent confidence interval calibrated relative risk calibratedP calibrated p-value calibratedOneSidedP calibrated one sided p-value calibratedLogRr calibrated log relative risk calibratedSeLogRr calibrated log relative risk standard error nDatabases number databases included estimate.","code":""},{"path":"/reference/getSccsMetaEstimation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the self controlled case series (sccs) meta analysis results — getSccsMetaEstimation","text":"Specify connectionHandler, schema targetoutcome cohort IDs","code":""},{"path":[]},{"path":"/reference/getSccsMetaEstimation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the self controlled case series (sccs) meta analysis results — getSccsMetaEstimation","text":"","code":"conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  sccsMeta <- getSccsMetaEstimation(   connectionHandler = connectionHandler,    schema = 'main',   targetIds = 1,   outcomeIds = 3 )"},{"path":"/reference/getTargetBinaryFeatures.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregate statistics of binary feature analysis IDs of interest for targets — getTargetBinaryFeatures","title":"Extract aggregate statistics of binary feature analysis IDs of interest for targets — getTargetBinaryFeatures","text":"function extracts feature extraction results targets corresponding specified target outcome cohorts.","code":""},{"path":"/reference/getTargetBinaryFeatures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregate statistics of binary feature analysis IDs of interest for targets — getTargetBinaryFeatures","text":"","code":"getTargetBinaryFeatures(   connectionHandler,   schema,   cTablePrefix = \"c_\",   cgTablePrefix = \"cg_\",   databaseTable = \"database_meta_data\",   targetIds = NULL,   outcomeIds = NULL,   analysisIds = c(3) )"},{"path":"/reference/getTargetBinaryFeatures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregate statistics of binary feature analysis IDs of interest for targets — getTargetBinaryFeatures","text":"connectionHandler connection handler connects database extracts sql queries.  Create connection handler via `ResultModelManager::ConnectionHandler$new()`. schema result database schema (e.g., 'main' sqlite) cTablePrefix prefix used characterization results tables cgTablePrefix prefix used cohort generator results tables databaseTable name table database details (default 'database_meta_data') targetIds vector integers corresponding target cohort IDs outcomeIds vector integers corresponding outcome cohort IDs analysisIds feature extraction analysis ID interest (e.g., 201 condition)","code":""},{"path":"/reference/getTargetBinaryFeatures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregate statistics of binary feature analysis IDs of interest for targets — getTargetBinaryFeatures","text":"Returns data.frame columns: databaseName name database targetName target cohort name targetId target cohort unique identifier outcomeName outcome name outcomeId outcome unique identifier minPriorObservation minimum required observation days prior index entry outcomeWashoutDays patients outcome occurring within number days prior index excluded (NA means exclusion) covariateName name feature sumValue number cases feature value 1","code":""},{"path":"/reference/getTargetBinaryFeatures.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract aggregate statistics of binary feature analysis IDs of interest for targets — getTargetBinaryFeatures","text":"Specify connectionHandler, schema target/outcome cohort IDs","code":""},{"path":[]},{"path":"/reference/getTargetBinaryFeatures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregate statistics of binary feature analysis IDs of interest for targets — getTargetBinaryFeatures","text":"","code":"conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  tbf <- getTargetBinaryFeatures ( connectionHandler = connectionHandler,  schema = 'main' )"},{"path":"/reference/getTargetContinuousFeatures.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregate statistics of continuous feature analysis IDs of interest for targets — getTargetContinuousFeatures","title":"Extract aggregate statistics of continuous feature analysis IDs of interest for targets — getTargetContinuousFeatures","text":"function extracts continuous feature extraction results targets corresponding specified target cohorts.","code":""},{"path":"/reference/getTargetContinuousFeatures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregate statistics of continuous feature analysis IDs of interest for targets — getTargetContinuousFeatures","text":"","code":"getTargetContinuousFeatures(   connectionHandler,   schema,   cTablePrefix = \"c_\",   cgTablePrefix = \"cg_\",   databaseTable = \"database_meta_data\",   targetIds = NULL,   analysisIds = NULL )"},{"path":"/reference/getTargetContinuousFeatures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregate statistics of continuous feature analysis IDs of interest for targets — getTargetContinuousFeatures","text":"connectionHandler connection handler connects database extracts sql queries.  Create connection handler via `ResultModelManager::ConnectionHandler$new()`. schema result database schema (e.g., 'main' sqlite) cTablePrefix prefix used characterization results tables cgTablePrefix prefix used cohort generator results tables databaseTable name table database details (default 'database_meta_data') targetIds vector integers corresponding target cohort IDs analysisIds feature extraction analysis ID interest (e.g., 201 condition)","code":""},{"path":"/reference/getTargetContinuousFeatures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregate statistics of continuous feature analysis IDs of interest for targets — getTargetContinuousFeatures","text":"Returns data.frame columns: databaseName name database targetName target cohort name targetId target cohort unique identifier minPriorObservation minimum required observation days prior index entry covariateName name feature covariateId id feature countValue number cases feature minValue minimum value observed feature maxValue maximum value observed feature averageValue mean value observed feature standardDeviation standard deviation value observed feature medianValue median value observed feature p10Value 10th percentile value observed feature p25Value 25th percentile value observed feature p75Value 75th percentile value observed feature p90Value 90th percentile value observed feature","code":""},{"path":"/reference/getTargetContinuousFeatures.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract aggregate statistics of continuous feature analysis IDs of interest for targets — getTargetContinuousFeatures","text":"Specify connectionHandler, schema target/outcome cohort IDs","code":""},{"path":[]},{"path":"/reference/getTargetContinuousFeatures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregate statistics of continuous feature analysis IDs of interest for targets — getTargetContinuousFeatures","text":"","code":"conDet <- getExampleConnectionDetails() #> Closing database connection  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  tcf <- getTargetContinuousFeatures( connectionHandler = connectionHandler,  schema = 'main' )"},{"path":"/reference/getTargetCounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the target cohort counts result — getTargetCounts","title":"Extract the target cohort counts result — getTargetCounts","text":"function extracts target cohort counts across databases results specified target outcome cohorts.","code":""},{"path":"/reference/getTargetCounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the target cohort counts result — getTargetCounts","text":"","code":"getTargetCounts(   connectionHandler,   schema,   cTablePrefix = \"c_\",   cgTablePrefix = \"cg_\",   databaseTable = \"database_meta_data\",   targetIds = NULL,   outcomeIds = NULL )"},{"path":"/reference/getTargetCounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the target cohort counts result — getTargetCounts","text":"connectionHandler connection handler connects database extracts sql queries.  Create connection handler via `ResultModelManager::ConnectionHandler$new()`. schema result database schema (e.g., 'main' sqlite) cTablePrefix prefix used characterization results tables cgTablePrefix prefix used cohort generator results tables databaseTable name table database details (default 'database_meta_data') targetIds vector integers corresponding target cohort IDs outcomeIds vector integers corresponding outcome cohort IDs","code":""},{"path":"/reference/getTargetCounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the target cohort counts result — getTargetCounts","text":"Returns data.frame columns: databaseName name database targetName target cohort name targetId target cohort unique identifier outcomeName outcome name outcomeId outcome unique identifier rowCount number entries cohort personCount number people cohort minPriorObservation minimum required observation days prior index entry outcomeWashoutDays patients outcome occurring within number days prior index excluded (NA means exclusion)","code":""},{"path":"/reference/getTargetCounts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the target cohort counts result — getTargetCounts","text":"Specify connectionHandler, schema target/outcome cohort IDs","code":""},{"path":[]},{"path":"/reference/getTargetCounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the target cohort counts result — getTargetCounts","text":"","code":"conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  tc <- getTargetCounts( connectionHandler = connectionHandler,  schema = 'main' )"},{"path":"/reference/getTimeToEvent.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the time to event result — getTimeToEvent","title":"Extract the time to event result — getTimeToEvent","text":"function extracts time event results across databases specified target outcome cohorts.","code":""},{"path":"/reference/getTimeToEvent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the time to event result — getTimeToEvent","text":"","code":"getTimeToEvent(   connectionHandler,   schema,   cTablePrefix = \"c_\",   cgTablePrefix = \"cg_\",   databaseTable = \"database_meta_data\",   targetIds = NULL,   outcomeIds = NULL )"},{"path":"/reference/getTimeToEvent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the time to event result — getTimeToEvent","text":"connectionHandler connection handler connects database extracts sql queries.  Create connection handler via `ResultModelManager::ConnectionHandler$new()`. schema result database schema (e.g., 'main' sqlite) cTablePrefix prefix used characterization results tables cgTablePrefix prefix used cohort generator results tables databaseTable name table database details (default 'database_meta_data') targetIds vector integers corresponding target cohort IDs outcomeIds vector integers corresponding outcome cohort IDs","code":""},{"path":"/reference/getTimeToEvent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the time to event result — getTimeToEvent","text":"Returns data.frame columns: databaseName name database targetName target cohort name targetId target cohort unique identifier outcomeName outcome name outcomeId outcome unique identifier outcomeType Whether outcome first subsequent targetOutcomeType interval outcome occurs timeToEvent number days index numEvents number target cohort entries timeScale correspondin time-scale","code":""},{"path":"/reference/getTimeToEvent.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the time to event result — getTimeToEvent","text":"Specify connectionHandler, schema target/outcome cohort IDs","code":""},{"path":[]},{"path":"/reference/getTimeToEvent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the time to event result — getTimeToEvent","text":"","code":"conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  tte <- getTimeToEvent( connectionHandler = connectionHandler,  schema = 'main' )"},{"path":"/reference/kableDark.html","id":null,"dir":"Reference","previous_headings":"","what":"output a nicely formatted html table — kableDark","title":"output a nicely formatted html table — kableDark","text":"returns html table input data","code":""},{"path":"/reference/kableDark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"output a nicely formatted html table — kableDark","text":"","code":"kableDark(data, caption = NULL, position = NULL)"},{"path":"/reference/kableDark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"output a nicely formatted html table — kableDark","text":"data data.frame containing data interest show via table caption caption table position position table used within quarto document. \"real\" say floating position latex table environment. kable puts tables table environment caption provided. also reason tables floating around specify captions table. Possible choices h (), t (top, default), b (bottom) p (dedicated page).","code":""},{"path":"/reference/kableDark.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"output a nicely formatted html table — kableDark","text":"object class `knitr_kable` show data via nice html table","code":""},{"path":"/reference/kableDark.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"output a nicely formatted html table — kableDark","text":"Input data want shown via dark html table","code":""},{"path":[]},{"path":"/reference/kableDark.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"output a nicely formatted html table — kableDark","text":"","code":"kableDark( data = data.frame(a=1,b=4),  caption = 'A made up table to demonstrate this function', position = 'h' ) #> <table class=\" lightable-material-dark lightable-hover\" style='font-family: \"Source Sans Pro\", helvetica, sans-serif; margin-left: auto; margin-right: auto;'> #> <caption>A made up table to demonstrate this function<\/caption> #>  <thead> #>   <tr> #>    <th style=\"text-align:right;\"> a <\/th> #>    <th style=\"text-align:right;\"> b <\/th> #>   <\/tr> #>  <\/thead> #> <tbody> #>   <tr> #>    <td style=\"text-align:right;\"> 1 <\/td> #>    <td style=\"text-align:right;\"> 4 <\/td> #>   <\/tr> #> <\/tbody> #> <\/table>"},{"path":"/reference/plotAgeDistributions.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots the age distributions using the binary age groups — plotAgeDistributions","title":"Plots the age distributions using the binary age groups — plotAgeDistributions","text":"Creates bar charts target case age groups.","code":""},{"path":"/reference/plotAgeDistributions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots the age distributions using the binary age groups — plotAgeDistributions","text":"","code":"plotAgeDistributions(   ageData,   riskWindowStart = \"1\",   riskWindowEnd = \"365\",   startAnchor = \"cohort start\",   endAnchor = \"cohort start\" )"},{"path":"/reference/plotAgeDistributions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots the age distributions using the binary age groups — plotAgeDistributions","text":"ageData age data extracted using 'getCharacterizationDemographics(type = 'age')' riskWindowStart time risk window start riskWindowEnd time risk window end startAnchor anchor time risk start endAnchor anchor time risk end","code":""},{"path":"/reference/plotAgeDistributions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots the age distributions using the binary age groups — plotAgeDistributions","text":"Returns ggplot distributions","code":""},{"path":"/reference/plotAgeDistributions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plots the age distributions using the binary age groups — plotAgeDistributions","text":"Input data returned 'getCharacterizationDemographics(type = 'age')' time--risk","code":""},{"path":[]},{"path":"/reference/plotAgeDistributions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots the age distributions using the binary age groups — plotAgeDistributions","text":"","code":"conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  ageData <- getCharacterizationDemographics( connectionHandler = connectionHandler,  schema = 'main', targetId = 1,  outcomeId = 3,  type = 'age' )  plotAgeDistributions(ageData = ageData)"},{"path":"/reference/plotCmEstimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots the cohort method results for one analysis — plotCmEstimates","title":"Plots the cohort method results for one analysis — plotCmEstimates","text":"Creates nice cohort method plots","code":""},{"path":"/reference/plotCmEstimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots the cohort method results for one analysis — plotCmEstimates","text":"","code":"plotCmEstimates(   cmData,   cmMeta = NULL,   targetName,   comparatorName,   selectedAnalysisId )"},{"path":"/reference/plotCmEstimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots the cohort method results for one analysis — plotCmEstimates","text":"cmData cohort method data cmMeta (optional) cohort method evidence synthesis data targetName friendly name target cohort comparatorName friendly name comparator cohort selectedAnalysisId analysis ID interest plot","code":""},{"path":"/reference/plotCmEstimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots the cohort method results for one analysis — plotCmEstimates","text":"Returns ggplot estimates","code":""},{"path":"/reference/plotCmEstimates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plots the cohort method results for one analysis — plotCmEstimates","text":"Input cohort method data","code":""},{"path":[]},{"path":"/reference/plotCmEstimates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots the cohort method results for one analysis — plotCmEstimates","text":"","code":"conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  cmEst <- getCMEstimation(   connectionHandler = connectionHandler,    schema = 'main',   targetIds = 1,   outcomeIds = 3 ) plotCmEstimates(   cmData = cmEst,    cmMeta = NULL,    targetName = 'target',    comparatorName = 'comp',    selectedAnalysisId = 1 ) #> NULL"},{"path":"/reference/plotSccsEstimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots the self controlled case series results for one analysis — plotSccsEstimates","title":"Plots the self controlled case series results for one analysis — plotSccsEstimates","text":"Creates nice self controlled case series plots","code":""},{"path":"/reference/plotSccsEstimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots the self controlled case series results for one analysis — plotSccsEstimates","text":"","code":"plotSccsEstimates(sccsData, sccsMeta = NULL, targetName, selectedAnalysisId)"},{"path":"/reference/plotSccsEstimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots the self controlled case series results for one analysis — plotSccsEstimates","text":"sccsData self controlled case series data sccsMeta (optional) self controlled case seriesd evidence synthesis data targetName friendly name target cohort selectedAnalysisId analysis ID interest plot","code":""},{"path":"/reference/plotSccsEstimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots the self controlled case series results for one analysis — plotSccsEstimates","text":"Returns ggplot estimates","code":""},{"path":"/reference/plotSccsEstimates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plots the self controlled case series results for one analysis — plotSccsEstimates","text":"Input self controlled case series data","code":""},{"path":[]},{"path":"/reference/plotSccsEstimates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots the self controlled case series results for one analysis — plotSccsEstimates","text":"","code":"if (FALSE) { # \\dontrun{  conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet)  sccsEst <- getSccsEstimation(   connectionHandler = connectionHandler,    schema = 'main',   targetIds = 1,   outcomeIds = 3 ) plotSccsEstimates(   sccsData = sccsEst,    sccsMeta = NULL,    targetName = 'target',    selectedAnalysisId = 1 ) } # }"},{"path":"/reference/plotSexDistributions.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots the sex distributions using the sex features — plotSexDistributions","title":"Plots the sex distributions using the sex features — plotSexDistributions","text":"Creates bar charts target case sex.","code":""},{"path":"/reference/plotSexDistributions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots the sex distributions using the sex features — plotSexDistributions","text":"","code":"plotSexDistributions(   sexData,   riskWindowStart = \"1\",   riskWindowEnd = \"365\",   startAnchor = \"cohort start\",   endAnchor = \"cohort start\" )"},{"path":"/reference/plotSexDistributions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots the sex distributions using the sex features — plotSexDistributions","text":"sexData sex data extracted using 'getCharacterizationDemographics(type = 'sex')' riskWindowStart time risk window start riskWindowEnd time risk window end startAnchor anchor time risk start endAnchor anchor time risk end","code":""},{"path":"/reference/plotSexDistributions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots the sex distributions using the sex features — plotSexDistributions","text":"Returns ggplot distributions","code":""},{"path":"/reference/plotSexDistributions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plots the sex distributions using the sex features — plotSexDistributions","text":"Input data returned 'getCharacterizationDemographics(type = 'sex')' time--risk","code":""},{"path":[]},{"path":"/reference/plotSexDistributions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots the sex distributions using the sex features — plotSexDistributions","text":"","code":"conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  sexData <- getCharacterizationDemographics(   connectionHandler = connectionHandler,    schema = 'main',   targetId = 1,    outcomeId = 3,    type = 'sex' ) plotSexDistributions(sexData = sexData)"},{"path":"/reference/printReactable.html","id":null,"dir":"Reference","previous_headings":"","what":"prints a reactable in a quarto document — printReactable","title":"prints a reactable in a quarto document — printReactable","text":"function lets print reactable quarto document","code":""},{"path":"/reference/printReactable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"prints a reactable in a quarto document — printReactable","text":"","code":"printReactable(   data,   columns = NULL,   groupBy = NULL,   defaultPageSize = 20,   highlight = TRUE,   striped = T )"},{"path":"/reference/printReactable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"prints a reactable in a quarto document — printReactable","text":"data data table columns formating columns groupBy column columns group table defaultPageSize number rows table highlight whether highlight row interest striped whether rows change color give striped appearance","code":""},{"path":"/reference/printReactable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"prints a reactable in a quarto document — printReactable","text":"Nothing table printed quarto document","code":""},{"path":"/reference/printReactable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"prints a reactable in a quarto document — printReactable","text":"Input values reactable::reactable","code":""},{"path":[]},{"path":"/reference/printReactable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"prints a reactable in a quarto document — printReactable","text":"","code":"printReactable( data = data.frame(a=1,b=4) ) #> <div class=\"reactable html-widget html-fill-item\" id=\"htmlwidget-ac96cb3ee4656e2e9ec3\" style=\"width:auto;height:auto;\"><\/div> #> <script type=\"application/json\" data-for=\"htmlwidget-ac96cb3ee4656e2e9ec3\">{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"a\":[1],\"b\":[4]},\"columns\":[{\"id\":\"a\",\"name\":\"a\",\"type\":\"numeric\"},{\"id\":\"b\",\"name\":\"b\",\"type\":\"numeric\"}],\"defaultPageSize\":20,\"highlight\":true,\"striped\":true,\"dataKey\":\"74006b58611cd0240b77609648c1a054\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}<\/script>"},{"path":"/reference/processCohorts.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the cohort parents and children cohorts (cohorts derieved from the parent cohort) — processCohorts","title":"Extract the cohort parents and children cohorts (cohorts derieved from the parent cohort) — processCohorts","text":"function lets split cohort data.frame parents children per parent.","code":""},{"path":"/reference/processCohorts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the cohort parents and children cohorts (cohorts derieved from the parent cohort) — processCohorts","text":"","code":"processCohorts(cohort)"},{"path":"/reference/processCohorts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the cohort parents and children cohorts (cohorts derieved from the parent cohort) — processCohorts","text":"cohort data.frame extracted using `getCohortDefinitions()`","code":""},{"path":"/reference/processCohorts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the cohort parents and children cohorts (cohorts derieved from the parent cohort) — processCohorts","text":"Returns list containing parents: named vector parent cohorts cohortList: list length parent vector first element containing children first parent cohort, second element containing children second parent, etc.","code":""},{"path":"/reference/processCohorts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the cohort parents and children cohorts (cohorts derieved from the parent cohort) — processCohorts","text":"Finds parent cohorts children cohorts","code":""},{"path":[]},{"path":"/reference/processCohorts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the cohort parents and children cohorts (cohorts derieved from the parent cohort) — processCohorts","text":"","code":"conDet <- getExampleConnectionDetails()  connectionHandler <- ResultModelManager::ConnectionHandler$new(conDet) #> Connecting using SQLite driver  cohortDef <- getCohortDefinitions(   connectionHandler = connectionHandler,    schema = 'main' )  parents <- processCohorts(cohortDef)"},{"path":"/reference/removeSpaces.html","id":null,"dir":"Reference","previous_headings":"","what":"removeSpaces — removeSpaces","title":"removeSpaces — removeSpaces","text":"Removes spaces replaces scroll","code":""},{"path":"/reference/removeSpaces.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"removeSpaces — removeSpaces","text":"","code":"removeSpaces(x)"},{"path":"/reference/removeSpaces.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"removeSpaces — removeSpaces","text":"x string","code":""},{"path":"/reference/removeSpaces.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"removeSpaces — removeSpaces","text":"string without spaces","code":""},{"path":"/reference/removeSpaces.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"removeSpaces — removeSpaces","text":"Removes spaces replaces scroll","code":""},{"path":[]},{"path":"/news/index.html","id":"ohdsireportgenerator-v100","dir":"Changelog","previous_headings":"","what":"OhdsiReportGenerator v1.0.0","title":"OhdsiReportGenerator v1.0.0","text":"Initial package generating study reports","code":""}]
